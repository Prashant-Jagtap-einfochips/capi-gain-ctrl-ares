###############################################################################################
Module Name:MODULE_ID_GAIN_MODULE
Module Id  :0x0700106F
###############################################################################################

Introduction:

This module amplfies the input by a factor that you provide to it as a set param (PARAM_ID_GAIN_MODULE_GAIN).


This module is a goto example to implement SISO modules which doesnt raise events to client and also which 
doesnt have any threshold requirement. The output media format is same as input media format hence we raise 
media format event as soon as we get valid input media format.

It works on a bitwidth of either 16 or 32. If a module works on only certain combinations of media format, 
that capi must validate the incoming media format.
###############################################################################################
Common events raised to framework by module:

BW event: All modules raise this event to inform framework about the bandwidth requirement of a 
particular module. When module doesnt raise this event, some default value is used by framework.

KPPS event: All modules raise this event to inform framework about KPPS(Kilo packets per second)
of any module. This helps in allocation of proper resources from framework as per module's requirement.
In absence of this, framework picks up a default value, which at times may not be enough to run a 
module properly.

Process event: This is one of the most important events. Framework calls a module's process only when 
this event is raised with enable flag as true. This event tells framework that a module is enabled and
its process call can be called. 

###############################################################################################
Compilation of Module:

There are 2 ways to compile a module. 

1.Static Compilation

It can either be compiled statically where in all the 
dependent code which module may use while running is built into the module's object files itself.
In such a case, when you run the code anywhere (be it target or simulator), it will always use 
the inbuilt code. 

Syntax:make hexagon BUILD=Debug DSP_ARCH=v68 STATIC=TRUE TREE=1

2.Dynamic compilation: In this case the module is compiled into .so (shared object) and its dependent code is compiled 
into .o (object files). When you run it on target which already has SPF framework, it automatically takes dependent 
functions from there, so we only need to push .so to target.

Syntax:make hexagon BUILD=Debug DSP_ARCH=v68 STATIC=FALSE TREE=1

Breakup of command:

hexagon: Builds for hexagon platform with default options.
BUILD: Build variant
DSP_ARCH: which DSP architecture you wih to use.
STATIC: THis flag should be set to FALSE for dynamic compilation and TRUE for static compilation.
        Absence of this flag will always lead to dynamic compilation.
TREE: If this flag is set to '1', it builds all project dependencies as well but if set to '0' it
      doesnt build project dependencies but only the module.

For quickly compiling sample_make.cmd file can be used, located in same directory.
For compiling, following command needs to be given on command line: sample_make.cmd <tool-version>
where tool version can be: 'toolv83' or 'toolv84' or 'toolv85'

For more details you can just type "make help" in cmd line client.	  

###############################################################################################
Command for cmake Compilation of Module:

build_cmake.exe hexagonsim DSP_ARCH=v68 VERBOSE=0

In above command, the cmake file must be picked from SDK_ROOT_FOLDER\build\cmake\WinNT\build_cmake.exe

###############################################################################################
Versioning of .so

Versioning of .so is introduced in this module. This helps us to block the .so which are already 
identified to have some bugs which result in issues while use case execution. This way, we can avoid 
debugging same issues again and again. Once a .so is blacklisted we need to have another vesion
of .so to be pushed to target for use case execution. 

For versioning we are using version_shared_lib.c file placed in "addons/audio/spf/examples/so_version" folder.
Symbols for that file are passed from makefile itself.

###############################################################################################
Clean up: 
Syntax:make hexagon_clean BUILD=Debug DSP_ARCH=v68 STATIC=FALSE TREE=1
       make hexagon_clean BUILD=Debug DSP_ARCH=v68 STATIC=TRUE TREE=1
###############################################################################################

Testing:

When a module is compiled, you will find a file getting generated by the name : "pmu_stats.txt"
Inside this file at the bottom, you will find command to run test on simulator.
It would  be like this:
Command line used to invoke simulator:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- 
####################################################################################################################################################
Test:1

Description:16 KHz, 1 channel. Negative gain.

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\input_16ks.raw -o data\op.pcm -c data\cfg\capiv2_gain_16k_1ch_0x1000.cfg
####################################################################################################################################################
Test:2

Description: 48KHz, 2 channels. Here, gain is set to 1, so the module disables itself as it will reult in output same as input. Hence, no processing is done and no output is generated. In actual framework, modules is bypassed in this scenario.

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\chirp16_2_48000Hz_new.raw -o data\op.pcm -c data\cfg\capiv2_gain_48k_2ch_0x2000.cfg
####################################################################################################################################################
Test:3

Description:Changing gain run time

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\chirp16_2_48000Hz_new.raw -o data\op.pcm -c data\cfg\capiv2_gain_48k_2ch_gain_change.cfg
####################################################################################################################################################
Test:4

Description:Changing media format

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\chirp16_2_48000Hz_new.raw -o data\op.pcm -c data\cfg\capiv2_gain_48k_2ch_media_fmt_change.cfg
####################################################################################################################################################
Test:5

Description:8 channels (multi channel)

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\chirp_20Hz_20kHz_0dB_48000Hz_8ch.wav -o data\op.pcm -c data\cfg\capiv2_gain_48k_8ch_0x1000.cfg
####################################################################################################################################################
Test:6

Description:bps= 32 in Q27 format ( 24 bits per sample usecase )

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\32_bit_48K.wav -o data\op.pcm -c data\cfg\48k_32_2.cfg
##############################################################END_OF_FILE############################################################################
Test 7

Description:bps= 32 in Q31 format ( 32 bits per sample usecase )

Command:
hexagon-sim -mv66g_1024 --simulated_returnval --usefs hexagon_Debug_toolv84_v66 --pmu_statsfile hexagon_Debug_toolv84_v66/pmu_stats.txt hexagon_Debug_toolv84_v66/capi_gain_q -- -i data\input\32_bit_48K.wav -o data\op.pcm -c data\cfg\48k_32_2_q31.cfg
################################################################END_OF_FILE##########################################################################
